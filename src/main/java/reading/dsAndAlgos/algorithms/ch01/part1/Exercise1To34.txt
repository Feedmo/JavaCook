1.1.1
a) 7
b) 200.0000002
c) true

1.1.2
a) double 1.618
b) double 10.0
c) boolean true
d) String "33"

1.1.3
// 命令行输入三个整数，如果都相等打印equal，否则打印not equal
public static void main(String[] args) {
	int a = Integer.parseInt(args[0]);
	int b = Integer.parseInt(args[1]);
	int c = Integer.parseInt(args[2]);
	isEqual(a, b ,c);
}

private static void isEqual(int a, int b, int c) {
	if (a == b && b == c) {
		System.out.println("equal");
	} else {
		System.out.println("equal");
	}
}

1.1.8
System.out.println('b') -> b
System.out.println('b'+'c') -> 197
System.out.println((char) ('a'+4)) -> b
System.out.println('a'+4) -> 101 

1.1.9
static String transfer(int N) {
	StringBuilder result = new StringBuilder();
	while (N != 0) {
		result.append(N % 2);
		N /= 2;
	}
	return result.toString();
}

1.1.13
// 打印M行N列数组的转置
void transpose(int[][] a) {
	int row = a.length;
	int col = a[0].length;
	for(int i=0; i<col; i++) {
		for (int j = 0; j<row; j++) {
			System.out.println(a[j][i]+" ");
		}
		System.out.println();
	}
}
// 也可以用N行M列的数组填充

	
1.1.15 	
// a中的元素大小在0-(M-1)之间，返回的数组(大小为M)中第i个元素的值为整数i在a中出现的次数
int[] histogram(int[] a, int M) {
	int[] result = new int[M];
	for(int i =0; i<a.length; i++) {
		result[a[i]]++;
	}
	return result;
}


1.1.22
// 用递归方式实现BinarySearch，并缩进地打印lo hi的值
// call: rank(a, 0, a.length-1, k, 0);
int rank(int[] a, int lo, int hi, int k, int depth) {
	if (hi > lo) return -1;
	int mid = (lo + hi) / 2;

	for (int i = 0; i < depth; i++) {
		StdOut.print(" ");
	}
	System.out.println(lo + " " + hi);
	
	if (a[mid] < k) lo = mid + 1;
	else if (a[mid] > k) hi = mid - 1;
	else return mid;

	return rank(a, lo, hi, k, depth+1);
}

1.1.24
int euclid(int a, int b) {
	System.out.println("p: "+a+", q: "+b);
	if (b == 0) return a;
	return euclid(b, a % b);
}


1.1.28
// 删除数组中的重复元素
static int[] removeDuplicates(int[] a) {
	int[] newWhiteList = new int[a.length];
	newWhiteList[0] = a[0];
	int index = 0;
	for (int i =1; i<a.length; i++) {
		while (a[i] == newWhiteList[index]) i++;
		newWhiteList[++index] = a[i];
	}
	int[] compactArray = new int[index+1];
	System.arraycopy(newWhiteList,0,compactArray, 0, index+1);
	return compactArray;
}

1.1.29
// 返回数组中小于key的元素的个数，a为有序数组
int rankOfKey(int key, int[] a) {
	int index = BinarySearch.rank(key, a);
	if (index == -1) return -1;
	if (index == 0) return 0;
	while (index > 0) {
		if (a[index] == a[index-1]) index--;
		else break;
	}
	return index;
}

// calculate the amount of the same key in sorted array
static int count(int key, int[] a) {
    int index = BinarySearch.rank_iteration(key, a);
    int tmp = index, count = 0;

    if (index != -1) {
        count++;
        while (index < a.length - 1 && a[index] == a[index + 1]) {
            index++;
            count++;
        }
        index = tmp;
        while (index > 0 && a[index] == a[index - 1]) {
            index--;
            count++;
        }
    }
    return count;
}


//1.1.30
// 创建NxN的布尔数组，当i,j互质时，a[i][j]=true, 否则为false
int len  =a.length;
for (int i =0; i<len; i++) {
	for (int j = 0; j < len; j++) {
		a[i][j] = isCoprime(i, j);
	}
}

static boolean isCoprime(int i, int j) {
	if (i == j) return false;
	
	boolean isPrime = true;
	int smallestValue = (i < j) ? i : j;
	
	for (int k = 2; k<= smallestValue; k++) {
		if (i % k == 0 && j % k == 0) {
			isPrime = false;
			break;
		}
	}
	return isPrime;
}
